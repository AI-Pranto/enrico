c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,f,eg
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
! Sets the force term in the momentum equation. Use this to set body
! forces such as gravity. Note that ffx, ffy, and ffz will later be
! multiplied by the density.
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx=0.0
      ffy=0.0
      ffz=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'NEKMOOSE'   
      real sint, sint1, sarea, sarea1, wtmp
      integer e, f 

      n1=nelt*lx1*ly1*lz1
      n2=nelt*lx2*ly2*lz2

      pmin=glmin(pr,n2)
      pmax=glmax(pr,n2)
      wmin=glmin(vz,n1)
      wmax=glmax(vz,n1)
      tmin=glmin(t,n1)
      tmax=glmax(t,n1)

      ifflow=.false. 

c      if (istep.eq.0) then
c         call rzero(t,n1) 
c      endif

      sint1=0.0
      sarea1=0.0

      do e=1,lelt
        do f=1,6
          call surface_int(sint,sarea,t,e,f)
          if (cbc(f,e,1).eq.'W  ') then
           sint1=sint1+sint  
           sarea1=sarea1+sarea
          endif          
         enddo 
      enddo

      call  gop(sint1,wtmp,'+  ',1)
      call  gop(sarea1,wtmp,'+  ',1)

      temp_nek=sint1/sarea1

      sint1=0.0
      sarea1=0.0

      do e=1,lelt
        do f=1,6
          call surface_int(sint,sarea,flux_recon,e,f)
          if (cbc(f,e,1).eq.'W  ') then
           sint1=sint1+sint
           sarea1=sarea1+sarea
          endif
         enddo
      enddo

      call  gop(sint1,wtmp,'+  ',1)
      call  gop(sarea1,wtmp,'+  ',1)

      flux_moose=sint1/sarea1

      call heat_balance(flux_moose)
      
      if (nid.eq.0) then
         write(6,*)"*** Temperature: ",tmin," - ",tmax
         write(6,*)"*** Average Temperature: ",temp_nek,coeff_tij(1,1)
         write(6,*)"*** Average Flux: ",flux_moose,coeff_fij(1,1)
      endif

c-----------------------------------------------
c This is for testing -----------
c      call flux_reconstruction()
c      call nek_expansion()
c      call nek_diag()
c      if (nid.eq.0) write(6,*)" *** Expansion done"
c      call nek_testp() 
c      call exitt()
c--------------------------------

c This is to test coefficients with MOOSE --
c      do i0=1,n_legendre
c        do j0=1,m_fourier
c        if (nid.eq.0) write(6,*)"C(",i0,",",j0,")=",
c     &      coeff_fij(i0,j0)
c        enddo 
c      enddo
c------------------------------------------
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'NEKMOOSE'      

      integer e,ieg
      real ucx, ucy, ucz, ucy_e, yy 

      e=gllel(ieg)

      zz  = zm1(ix,iy,iz,e)
      xx  = xm1(ix,iy,iz,e)
      yy  = ym1(ix,iy,iz,e)
      rr  = sqrt(xx**2 + yy**2)

      ux = 0.0
      uy = 0.0
      uz = 1.0
      temp = 0.0
      flux = flux_recon(ix,iy,iz,e) !flux_moose

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer idum, e
      save    idum
      data    idum / 0 /

      if (idum.eq.0) idum = 99 + nid
      eps = .35

      uz=0.0
      uy=0.0
      ux=0.0
      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'NEKMOOSE'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
      param(67) = 4.   ! good default values
      ifuservp=.false.


c     Will this be overwritten -----------------
      if (nid.eq.0) write(6,*)"*** Setting polynomial orders ..."
      n_legendre=10
      m_fourier=5
c-----------------------------------------------

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine heat_balance(fflux)
      include 'SIZE'
      include 'TOTAL'
      real sint, sint1, sarea, sarea1, wtmp, fflux
      real cache(lx1,ly1,lz1,lelt),dtdz(lx1,ly1,lz1,lelt),
     & dtdy(lx1,ly1,lz1,lelt),
     & dtdx(lx1,ly1,lz1,lelt)
      integer e, f

      n1=nelt*lx1*ly1*lz1
      n2=nelt*lx2*ly2*lz2
      nxyz=lx1*ly1*lz1
      call gradm1(dtdx,dtdy,dtdz,t(1,1,1,1,1))

      sint1=0.0
      sarea1=0.0
      do e=1,lelt
        do i=1,nxyz
          cache(i,1,1,e)=t(i,1,1,e,1)*vz(i,1,1,e)
        enddo
        do f=1,6
          call surface_int(sint,sarea,cache,e,f)
          if (cbc(f,e,1).eq.'O  ') then
           sint1=sint1+sint
           sarea1=sarea1+sarea
          endif
         enddo
      enddo
      call  gop(sint1,wtmp,'+  ',1)
      test_flux=sint1
      
      sint1=0.0
      sarea1=0.0
      do e=1,lelt
        do f=1,6
          call surface_int(sint,sarea,dtdz,e,f)
          if (cbc(f,e,1).eq.'v  ') then
           sint1=sint1+sint
           sarea1=sarea1+sarea
          endif
         enddo
      enddo
      call  gop(sint1,wtmp,'+  ',1)
      call  gop(sarea1,wtmp,'+  ',1)
      flux_inlet=sint1

      sint1=0.0
      sarea1=0.0
      do e=1,lelt
        do f=1,6
          call surface_int(sint,sarea,vz,e,f)
          if (cbc(f,e,1).eq.'W  ') then
           sarea1=sarea1+sarea
          endif
         enddo
      enddo
      call  gop(sarea1,wtmp,'+  ',1)

      if (nid.eq.0) then
         rr_loss=
     &   flux_inlet*param(8)/(test_flux+flux_inlet*param(8))
         write(6,*)"*** Heat balance: ",
     &   sarea1*fflux,test_flux+flux_inlet*param(8)
         write(6,*)"*** Heat loss: ",rr_loss*100.0," %"
      endif

      return
      end
c-----------------------------------------------------------------------
